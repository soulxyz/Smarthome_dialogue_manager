[tool:pytest]
# pytest配置文件 - 支持真实测试环境

# 测试发现
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# 输出配置
addopts = 
    -v
    --tb=short
    --strict-markers
    --strict-config
    --disable-warnings
    --color=yes
    --durations=10
    --cov=dialogue_manager
    --cov-report=html:htmlcov
    --cov-report=term-missing
    --cov-report=xml

# 标记定义
markers =
    # 测试类型标记
    unit: 单元测试
    integration: 集成测试
    system_test: 系统测试
    api_required: 需要真实API的测试
    internal_logic: 内部逻辑测试（可压力测试）
    slow: 慢速测试（可能耗时较长）
    
    # 功能模块标记
    device_manager: 设备管理器相关测试
    dialogue_system: 对话系统相关测试
    focus_management: 焦点实体管理测试
    omission_resolution: 省略消解测试
    edge_cases: 边界条件测试
    error_handling: 错误处理测试
    performance: 性能测试
    semantic_coverage: 语义覆盖度测试，识别改进机会，不阻塞CI
    
    # 环境要求标记
    requires_db: 需要数据库的测试
    requires_network: 需要网络连接的测试
    memory_intensive: 内存密集型测试

# 最小版本要求
minversion = 6.0

# 警告过滤
filterwarnings =
    ignore::UserWarning
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    # 显示语义覆盖度警告
    always::tests.test_semantic_coverage_cases.SemanticCoverageWarning

# 日志配置
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# 测试超时
timeout = 300

# 并发配置
# 如果安装了pytest-xdist，可以启用并行测试
# addopts = -n auto

# 测试覆盖率配置
[coverage:run]
source = dialogue_manager
omit = 
    */tests/*
    */test_*
    */__pycache__/*
    */venv/*
    */env/*

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod